"author :charan
"gmail:charancuz008@gmail.com
" => General
" Sets how many lines of history VIM has to remember
set history=500

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * silent! checktime


" :W sudo saves the file
" (useful for handling the permission-denied error)
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

"disables the start page
set shortmess+=I

" this option need not xplicitly
"set nocp

" Turn on the Wild menu
" set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Always show current position
set ruler

" show line numbers
set number

" show line numbers
set relativenumber

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set belloff=all
set t_vb=
set tm=500

" Add a bit extra margin to the left
"set foldcolumn=1


" => Colors and Fonts

"set guifont and size
set guifont=Fixedsys:h9


" Enable syntax highlighting
syntax enable

" Set regular expression engine automatically
set regexpengine=0

" Enable 256 colors palette in Gnome Terminal
if $COLORTERM == 'alacritty'
    set t_Co=256
endif

try
    colorscheme retrobox
catch
endtry

set background=dark


" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions+=m
    set guioptions-=T "tool bar
    set guioptions+=e "tab line
    "remove scrollbars
    set guioptions-=g
    set guioptions-=r
    "set guioptions-=L 

    set t_Co=256
    set guitablabel=%M\ %t
endif

" => Files, backups and undo

" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
autocmd FileType c,cpp setlocal cindent "c-style indent
set wrap "Wrap lines

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


" => Helper functions

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

"vim plug
call plug#begin('~/.vim/plugged')

"Plug 'morhetz/gruvbox'
Plug 'jiangmiao/auto-pairs'
"Plug 'preservim/nerdtree'
"Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
"Plug 'junegunn/fzf.vim'
"Plug 'vim-airline/vim-airline'
"Plug 'dense-analysis/ale'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

call plug#end()



"extra config added for windows but some may work for linux too
" ->keymaps
" different keymaps for easy peasy coding

"  for windows build
" Build only (F9)
nnoremap <F9> :w<CR>:!g++ -Wall % -o %<.exe<CR>

" Run only (F5)
nnoremap <F5> :w<CR>:!%<.exe<CR>

" Build and Run (F6)
nnoremap <F6> :w<CR>:!g++ -Wall % -o %<.exe && %<.exe<CR>

"for linux/macos build
" Build only (F9)
"nnoremap <F9> :w<CR>:!g++ -Wall % -o %<<CR>

" Run only (F5)
"nnoremap <F5> :w<CR>:!./%<<CR>

" Build and Run (F6)
"nnoremap <F6> :w<CR>:!g++ -Wall % -o %< && ./%<<CR>
